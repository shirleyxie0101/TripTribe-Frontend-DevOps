def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
]

pipeline {
    agent any

    tools {
        nodejs 'nodejs-21.4.0'
    }

    environment {
        REPO_URL = 'https://github.com/ExploreXperts/TripTribe-Frontend.git'
        VERCEL_TOKEN = credentials('vercel-token') // Create a Jenkins secret credential with the Vercel token
        VERCEL_PROJECT_ID = credentials('VERCEL_PROJECT_ID')
        VERCEL_ORG_ID = credentials('VERCEL_ORG_ID') // Set your Vercel organization ID
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the repository from GitHub
                checkout([$class: 'GitSCM', branches: [[name: 'feature/Jenkins_pipeline']], userRemoteConfigs: [[url: env.REPO_URL, credentialsId: 'devon']]])
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    sh 'npm ci'
                    sh 'npm run lint'
                    sh 'npm run format'
                }
            }
        }

        // stage ('Test Source Code') {

        //     steps {
        //         script {
        //             sh 'npm run test'
        //             sh 'npm run test:coverage'
        //         }
        //     }
        // }

        stage('SonarQube Analysis') {
            environment {
                scannerHome = tool 'sonarqube'
            }
            steps {
                script {
                        withSonarQubeEnv('sonarqube') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=$JOB_NAME \
                            -Dsonar.projectName=$JOB_NAME \
                            -Dsonar.projectVersion=$BUILD_NUMBER \
                            -Dsonar.sources=src/
                        """
                        }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    // Just in case something goes wrong, pipeline will be killed after a timeout
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Install Dependencies and Deploy') {
            steps {
                script {
                    // Install Node.js and npm (assuming Node.js tool is already configured)

                    // Install Vercel CLI
                    sh 'npm install -g vercel'

                    // Print Vercel token for debugging purposes
                    echo "Vercel Token: ${VERCEL_TOKEN}"

                    // Pull Vercel environment information
                    sh 'vercel pull --yes --environment=preview --token=$VERCEL_TOKEN'

                    // Build project artifacts (if needed)
                    // sh 'npm ci'
                    sh 'vercel build --token=$VERCEL_TOKEN'
                    sh 'vercel deploy --prebuilt --token=${VERCEL_TOKEN}'
                }
            }
        }
    }

    post {
        success {
                emailext subject: 'Build Successfully',
                body: 'The Jenkins build succeed. Please check the build logs for more information. $DEFAULT_CONTENT',
                recipientProviders: [
                    [$class: 'CulpritsRecipientProvider'],
                    [$class: 'DevelopersRecipientProvider'],
                    [$class: 'RequesterRecipientProvider']
                ],
                to: 'jlix723@gmail.com'
        }

        failure {
                emailext subject: 'Build Failed',
                body: 'The Jenkins build failed. Please check the build logs for more information. $DEFAULT_CONTENT',
                recipientProviders: [
                    [$class: 'CulpritsRecipientProvider'],
                    [$class: 'DevelopersRecipientProvider'],
                    [$class: 'RequesterRecipientProvider']
                ],
                to: 'jlix723@gmail.com'
        }

        always {
            echo 'Slack Notifications.'
            slackSend channel: '#jenkinscicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
